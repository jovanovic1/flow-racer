%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 044c6937c7ef4c2da3345b440a6fa8dc, type: 3}
  m_Name: MintNFT
  m_EditorClassIdentifier: 
  text: '  import NonFungibleToken from 0x631e88ae7f1d7c20 import ExampleNFT from
    0x0fb46f70bfa68d94 import MetadataViews from 0x631e88ae7f1d7c20 import FungibleToken
    from 0x9a0766d93b6608b7    transaction(     recipient: Address,     name: String,    
    description: String,     thumbnail: String, ) {      /// local variable for storing
    the minter reference     let minter: &ExampleNFT.NFTMinter      /// Reference
    to the receiver''s collection     let recipientCollectionRef: &{NonFungibleToken.CollectionPublic}     
    /// Previous NFT ID before the transaction executes     let mintingIDBefore:
    UInt64      prepare(signer: AuthAccount) {         self.mintingIDBefore = ExampleNFT.totalSupply         
    // borrow a reference to the NFTMinter resource in storage         self.minter
    = signer.borrow<&ExampleNFT.NFTMinter>(from: ExampleNFT.MinterStoragePath)            
    ?? panic("Account does not store an object at the specified path")          //
    Borrow the recipient''s public NFT collection reference         self.recipientCollectionRef
    = getAccount(recipient)             .getCapability(ExampleNFT.CollectionPublicPath)            
    .borrow<&{NonFungibleToken.CollectionPublic}>()             ?? panic("Could not
    get receiver reference to the NFT Collection")     }      pre {             
    }      execute {          // Mint the NFT and deposit it to the recipient''s
    collection         self.minter.mintNFT(             recipient: self.recipientCollectionRef,            
    name: name,             description: description,             thumbnail: thumbnail,            
    royalties: [] as [MetadataViews.Royalty]         )     }      post {        
    self.recipientCollectionRef.getIDs().contains(self.mintingIDBefore): "The next
    NFT ID should have been minted and delivered"         ExampleNFT.totalSupply
    == self.mintingIDBefore + 1: "The total supply should have been increased by
    1"     } }'
